//
//  FileWriterHelper.cpp
//  ast-answerer
//
//  Created by Maddy Adams on 4/17/24.
//

#include "FileWriterHelper.h"
#include <algorithm>
#include <iostream>

FileWriterHelper::FileWriterHelper(const std::string& fileName) :
_fileName(fileName),
_openFileSuffix(""),
_writesPrologue(true)
{}

FileWriterHelper::FileWriterHelper(const std::filesystem::path& directory, 
                                   const std::string& fileName) :
_fileName(fileName),
_openFileSuffix(""),
_directory(directory),
_writesPrologue(true)
{}

FileWriterHelper::~FileWriterHelper() {
    if (hasOpenFile()) {
        std::cerr << "Error! Dtor while file is open" << std::endl;
        __builtin_trap();
    }
}

void FileWriterHelper::setDirectory(const std::filesystem::path &directory) {
    _directory = directory;
}

void FileWriterHelper::setFileName(const std::string& fileName) {
    _fileName = fileName;
}

void FileWriterHelper::openHeaderFile(const std::string& headerGuardToken) {
    _headerFileName = _fileName;
    _headerGuardToken = headerGuardToken;
    if (_headerGuardToken.size() == 0) {
        _headerGuardToken = _headerFileName + "_h";
    }
    _openFile("h");
}

void FileWriterHelper::openCppFile() {
    _openFile("cpp");
}

void FileWriterHelper::openMmFile() {
    _openFile("mm");
}

void FileWriterHelper::openSwiftFile() {
    _openFile("swift");
}

void FileWriterHelper::openModulemapFile() {
    _openFile("modulemap");
}

void FileWriterHelper::openAPINotesFile() {
    _openFile("apinotes");
}

void FileWriterHelper::openDocCFile() {
    _openFile("md");
}

void FileWriterHelper::addLine(const std::string &line) {
    if (!hasOpenFile()) {
        std::cerr << "Error! File is closed (addLine)" << std::endl;
        __builtin_trap();
    }
    
    // Deduplicate platform guarding
     if (__lines.size() && "#endif // " + line == __lines.back()) {
         __lines.pop_back();
         return;
     }
    
    __lines.push_back(line);
}

void FileWriterHelper::addLines(const std::vector<std::string> &lines) {
    for (const auto& line : lines) {
        addLine(line);
    }
}

void FileWriterHelper::closeFile() {
    if (!hasOpenFile()) {
        std::cerr << "File is closed (closeFile)" << std::endl;
        __builtin_trap();
    }
    addLines(_getEpilogue());
    
    for (const std::string& line : __lines) {
        _stream << line << std::endl;
    }
    __lines.clear();
    
    _stream.close();
    std::cout << "Closed " << (_directory / _fileNameWithSuffix()).string();
    std::cout << " for writing." << std::endl;
        
    _openFileSuffix = "";
}


bool FileWriterHelper::hasOpenFile() const {
    return _openFileSuffix != "";
}

std::string FileWriterHelper::getOpenFileSuffix() const {
    return _openFileSuffix;
}

bool FileWriterHelper::getWritesPrologue() const {
    return _writesPrologue;
}

void FileWriterHelper::setWritesPrologue(bool newValue) {
    _writesPrologue = newValue;
}

std::vector<std::string> FileWriterHelper::_getPrologue() const {
    std::vector<std::string> result = {
        "//",
        "//  " + _fileNameWithSuffix(),
        "//  swiftUsd",
        "//",
        "//  Created by Maddy Adams on 4/17/24.",
        "//",
        "",
        "// This file was generated by ast-answerer. Do not edit!",
    };
    
    if (_openFileSuffix == "h") {
        result.push_back("#ifndef " + _headerGuardToken);
        result.push_back("#define " + _headerGuardToken);
        result.push_back("");
        result.push_back("#include \"swiftUsd/defines.h\"");
        result.push_back("");
    } else if (_openFileSuffix == "cpp" ||
               _openFileSuffix == "mm") {
        result.push_back("#include \"swiftUsd/generated/" + _headerFileName + ".h\"");
        result.push_back("");
    } else if (_openFileSuffix == "swift") {
        result.push_back("");
        result.push_back("");
    } else if (_openFileSuffix == "modulemap") {
        return {"// This file was generated by ast-answerer. Do not edit!", ""};
    } else if (_openFileSuffix == "apinotes") {
        return {"# This file was generated by ast-answerer. Do not edit!", ""};
    } else if (_openFileSuffix == "md") {
        return {};
    } else {
        std::cerr << "Unknown _openFileSuffix " << _openFileSuffix << std::endl;
        __builtin_trap();
    }
    
    return result;
}

std::vector<std::string> FileWriterHelper::_getEpilogue() const {
    std::vector<std::string> result;
    
    if (_openFileSuffix == "h") {
        result.push_back("#endif /* " + _headerGuardToken + " */");
    } else if (_openFileSuffix == "cpp" ||
               _openFileSuffix == "mm" ||
               _openFileSuffix == "swift" ||
               _openFileSuffix == "modulemap" ||
               _openFileSuffix == "apinotes" ||
               _openFileSuffix == "md") {
        // pass
    } else {
        std::cerr << "Unknown _openFileSuffix " << _openFileSuffix << std::endl;
        __builtin_trap();
    }
    
    return result;
}

void FileWriterHelper::_openFile(const std::string& suffix) {
    if (hasOpenFile()) {
        std::cerr << "File is open (_openFile)" << std::endl;
        __builtin_trap();
    }
    _openFileSuffix = suffix;
    
    std::cout << "Opening " << (_directory / _fileNameWithSuffix()).string();
    std::cout << " for writing..." << std::endl;
    std::filesystem::create_directories(_directory);
    _stream.open(_directory / _fileNameWithSuffix());
    
    if (_writesPrologue) {
        addLines(_getPrologue());
    }
}

std::string FileWriterHelper::_fileNameWithSuffix() const {
    return _fileName + "." + _openFileSuffix;
}
